{"version":3,"sources":["services/persons.js","App.js","reportWebVitals.js","index.js"],"names":["baseUrl","toExport","getAll","axios","get","then","response","data","create","newObject","post","delete","idToDelete","update","id","updatedObject","put","Person","person","deletePerson","name","number","value","onClick","Filter","filter","handleFilterChange","onChange","PersonForm","addPerson","newName","newNumber","handleNameChange","handleNumberChange","onSubmit","type","Persons","list","map","SuccessNotification","message","className","ErrorNotification","App","useState","persons","setPersons","setNewName","setNewNumber","setNewFilter","toLowerCase","includes","successNotification","setSuccessNotification","errorNotification","setErrorNotification","useEffect","personService","initialPersons","event","target","preventDefault","personObject","returnedPerson","setTimeout","concat","window","confirm","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e02bea2c.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, updatedObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, updatedObject)\n  return request.then(response => response.data)\n}\n\nconst deletePerson = idToDelete => {\n  const request = axios.delete(`${baseUrl}/${idToDelete}`)\n  return request.then(response => response.data)\n}\n\nconst toExport = { \n  getAll: getAll, \n  create: create,\n  delete: deletePerson,\n  update: update\n}\nexport default toExport","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setNewFilter ] = useState('')\n  const list = persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()))\n  const [successNotification, setSuccessNotification] = useState(null)\n  const [errorNotification, setErrorNotification] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n    }, [])\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value)\n  }\n  \n  const addPerson = (event) => {\n    event.preventDefault()\n    // if (!(persons.some(person => person.name === newName))) {\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          setSuccessNotification(`Added ${returnedPerson.name}`)\n          setTimeout(() => {\n            setSuccessNotification(null)\n          }, 5000)\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n        })\n    // }\n    // else {\n    //   if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n    //     const personObject = {\n    //       id: persons.filter(person => person.name === newName)[0].id,\n    //       name: newName,\n    //       number: newNumber\n    //     }\n    //     personService\n    //       .update(personObject.id, personObject)\n    //       .then(returnedPerson => {\n    //         setSuccessNotification(`Updated ${returnedPerson.name}`)\n    //         setTimeout(() => {\n    //           setSuccessNotification(null)\n    //         }, 5000)\n    //         setPersons(persons.map(person => person.id !== personObject.id ? person : returnedPerson))\n    //         setNewName('')\n    //         setNewNumber('')\n    //       })\n    //   }\n    // }\n  }\n\n  const deletePerson = (event) => {\n    event.preventDefault()\n    if (window.confirm(`Delete ${persons.filter(({ id }) => id === event.target.value)[0].name}?`))\n    personService\n      .delete(event.target.value)\n      .then(() => {\n        setPersons(persons.filter(({id}) => id !== event.target.value))\n      })\n      .catch(error => {\n        setErrorNotification(\n          `Information of \n          ${persons.filter(({ id }) => id === event.target.value)[0].name} \n          has already been removed from the server`\n        )\n        setTimeout(() => {\n          setErrorNotification(null)\n        }, 5000)\n        setPersons(persons.filter(({id}) => id !== event.target.value))\n      })\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <SuccessNotification message={successNotification} />\n      <ErrorNotification message={errorNotification} />\n      <form>\n        <Filter filter={filter} handleFilterChange={handleFilterChange} />\n      </form>\n      <h2>add a new</h2>\n      <PersonForm addPerson={addPerson} newName={newName} newNumber={newNumber} \n      handleNameChange={handleNameChange} handleNumberChange={handleNumberChange} />\n      <h2>Numbers</h2>\n      <Persons list={list} deletePerson={deletePerson} />\n    </div>\n  )\n}\n\nconst Person = ({ person, deletePerson }) => {\n  return (\n    <div>\n      {person.name} {person.number} <button value={person.id} onClick={deletePerson}>delete</button>\n      </div>\n  )\n}\n\nconst Filter = ({ filter, handleFilterChange }) => {\n  return (\n    <div>\n      filter shown with <input\n      value={filter}\n      onChange={handleFilterChange} />\n    </div>\n  )\n}\n\nconst PersonForm = ({ addPerson, newName, newNumber, handleNameChange, handleNumberChange }) => {\n  return (\n    <form onSubmit={addPerson}>\n        <div>\n          name: <input\n          value={newName}\n          onChange={handleNameChange} />\n        </div>\n        <div>number: <input \n          value={newNumber}\n          onChange={handleNumberChange}/>\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n  )\n}\n\nconst Persons = ({ list, deletePerson }) => {\n  return (\n    <li>\n      {list.map(person => \n        <Person key={person.name} person={person} deletePerson={deletePerson} />\n      )}\n    </li>\n  )\n}\n\nconst SuccessNotification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"successful\">\n      {message}\n    </div>\n  )\n}\n\nconst ErrorNotification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}